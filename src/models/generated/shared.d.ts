
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */


/**
 * Request body for the authentication endpoint
 */
export interface AuthenticationCreateRequest {
  strategy: "local" | "jwt-app";
  email?: string;
  password?: string;
  accessToken?: string;
  [k: string]: unknown;
}


/**
 * Authentication Response
 */
export interface AuthenticationResponse {
  accessToken: string;
  authentication: {
    strategy?: string;
    payload?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  user: User;
}
/**
 * User details
 */
export interface User {
  id: number;
  username: string;
  firstname: string;
  lastname: string;
  isStaff: boolean;
  isActive: boolean;
  isSuperuser: boolean;
  uid: string;
}


/**
 * Request to update collectible items in a collection
 */
export interface CollectableItemsUpdatedResponse {
  /**
   * Total number of items added to the collection
   */
  totalAdded: number;
  /**
   * Total number of items removed from the collection
   */
  totalRemoved: number;
  [k: string]: unknown;
}


/**
 * Remove collection response
 */
export interface RemoveCollectionResponse {
  params: {
    /**
     * The collection id
     */
    id?: string;
    /**
     * The status of the operation
     */
    status?: "DEL";
  };
  /**
   * Deletion task details
   */
  task: {
    /**
     * The ID of the task
     */
    task_id?: string;
    /**
     * When task was created
     */
    creationDate?: string;
  };
}


/**
 * Error response that follows https://datatracker.ietf.org/doc/html/rfc7807#section-3.1
 */
export interface Error {
  /**
   * A URI reference [RFC3986] that identifies the problem type.
   */
  type: string;
  /**
   * A short, human-readable summary of the problem type.
   */
  title: string;
  /**
   * The HTTP status code ([RFC7231], Section 6)
   */
  status: number;
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail?: string;
  [k: string]: unknown;
}


/**
 * A single filter criteria
 */
export interface Filter {
  context?: "include" | "exclude";
  op?: "AND" | "OR";
  /**
   * Possible values are in 'search.validators:eachFilterValidator.type.choices'
   */
  type: string;
  precision?: "fuzzy" | "soft" | "exact" | "partial";
  q?: string | string[];
  daterange?: string;
  uids?: string;
  uid?: string;
}


/**
 * Impresso NER entity
 */
export interface ImpressoNamedEntityRecognitionEntity {
  /**
   * ID of the entity
   */
  id: string;
  /**
   * Type of the entity
   */
  type:
    | "comp.demonym"
    | "comp.function"
    | "comp.name"
    | "comp.qualifier"
    | "comp.title"
    | "loc"
    | "loc.add.elec"
    | "loc.add.phys"
    | "loc.adm.nat"
    | "loc.adm.reg"
    | "loc.adm.sup"
    | "loc.adm.town"
    | "loc.fac"
    | "loc.oro"
    | "loc.phys.astro"
    | "loc.phys.geo"
    | "loc.phys.hydro"
    | "loc.unk"
    | "org"
    | "org.adm"
    | "org.ent"
    | "org.ent.pressagency"
    | "org.ent.pressagency.AFP"
    | "org.ent.pressagency.ANSA"
    | "org.ent.pressagency.AP"
    | "org.ent.pressagency.APA"
    | "org.ent.pressagency.ATS-SDA"
    | "org.ent.pressagency.Belga"
    | "org.ent.pressagency.CTK"
    | "org.ent.pressagency.DDP-DAPD"
    | "org.ent.pressagency.DNB"
    | "org.ent.pressagency.DPA"
    | "org.ent.pressagency.Domei"
    | "org.ent.pressagency.Europapress"
    | "org.ent.pressagency.Extel"
    | "org.ent.pressagency.Havas"
    | "org.ent.pressagency.Kipa"
    | "org.ent.pressagency.Reuters"
    | "org.ent.pressagency.SPK-SMP"
    | "org.ent.pressagency.Stefani"
    | "org.ent.pressagency.TASS"
    | "org.ent.pressagency.UP-UPI"
    | "org.ent.pressagency.Wolff"
    | "org.ent.pressagency.Xinhua"
    | "org.ent.pressagency.ag"
    | "org.ent.pressagency.unk"
    | "pers"
    | "pers.coll"
    | "pers.ind"
    | "pers.ind.articleauthor"
    | "prod"
    | "prod.doctr"
    | "prod.media"
    | "time"
    | "time.date.abs"
    | "time.hour.abs"
    | "unk";
  /**
   * Surface form of the entity
   */
  surfaceForm?: string;
  offset?: {
    /**
     * Start offset of the entity in the text
     */
    start: number;
    /**
     * End offset of the entity in the text
     */
    end: number;
  };
  /**
   * Whether the entity type is nested
   */
  isTypeNested?: boolean;
  confidence: {
    /**
     * Confidence score for the named entity recognition
     */
    ner?: number;
    /**
     * Confidence score for the named entity linking
     */
    nel?: number;
  };
  wikidata?: {
    /**
     * Wikidata ID of the entity
     */
    id: string;
    /**
     * Wikipedia page name of the entity
     */
    wikipediaPageName?: string;
    /**
     * Wikipedia page URL of the entity
     */
    wikipediaPageUrl?: string;
  };
  /**
   * Function of the entity
   */
  function?: string;
  /**
   * Name of the entity
   */
  name?: string;
}


/**
 * Request body for the Impresso NER endpoint
 */
export interface ImpressoNamedEntityRecognitionRequest {
  /**
   * Text to be processed for named entity recognition
   */
  text: string;
  /**
   * NER method to be used: `ner` (default), `ner-nel` (named entity recognition with named entity linking) and `nel` (linking only - enclose entities in [START] [END] tags).
   */
  method?: "ner" | "ner-nel" | "nel";
}


/**
 * Response of the Impresso NER endpoint
 */
export interface ImpressoNamedEntityRecognitionResponse {
  /**
   * ID of the model used for the named entity recognition
   */
  modelId: string;
  /**
   * Text processed for named entity recognition
   */
  text: string;
  /**
   * Timestamp of when named entity recognition was performed
   */
  timestamp: string;
  entities: ImpressoNamedEntityRecognitionEntity[];
}
/**
 * Impresso NER entity
 */
export interface ImpressoNamedEntityRecognitionEntity {
  /**
   * ID of the entity
   */
  id: string;
  /**
   * Type of the entity
   */
  type:
    | "comp.demonym"
    | "comp.function"
    | "comp.name"
    | "comp.qualifier"
    | "comp.title"
    | "loc"
    | "loc.add.elec"
    | "loc.add.phys"
    | "loc.adm.nat"
    | "loc.adm.reg"
    | "loc.adm.sup"
    | "loc.adm.town"
    | "loc.fac"
    | "loc.oro"
    | "loc.phys.astro"
    | "loc.phys.geo"
    | "loc.phys.hydro"
    | "loc.unk"
    | "org"
    | "org.adm"
    | "org.ent"
    | "org.ent.pressagency"
    | "org.ent.pressagency.AFP"
    | "org.ent.pressagency.ANSA"
    | "org.ent.pressagency.AP"
    | "org.ent.pressagency.APA"
    | "org.ent.pressagency.ATS-SDA"
    | "org.ent.pressagency.Belga"
    | "org.ent.pressagency.CTK"
    | "org.ent.pressagency.DDP-DAPD"
    | "org.ent.pressagency.DNB"
    | "org.ent.pressagency.DPA"
    | "org.ent.pressagency.Domei"
    | "org.ent.pressagency.Europapress"
    | "org.ent.pressagency.Extel"
    | "org.ent.pressagency.Havas"
    | "org.ent.pressagency.Kipa"
    | "org.ent.pressagency.Reuters"
    | "org.ent.pressagency.SPK-SMP"
    | "org.ent.pressagency.Stefani"
    | "org.ent.pressagency.TASS"
    | "org.ent.pressagency.UP-UPI"
    | "org.ent.pressagency.Wolff"
    | "org.ent.pressagency.Xinhua"
    | "org.ent.pressagency.ag"
    | "org.ent.pressagency.unk"
    | "pers"
    | "pers.coll"
    | "pers.ind"
    | "pers.ind.articleauthor"
    | "prod"
    | "prod.doctr"
    | "prod.media"
    | "time"
    | "time.date.abs"
    | "time.hour.abs"
    | "unk";
  /**
   * Surface form of the entity
   */
  surfaceForm?: string;
  offset?: {
    /**
     * Start offset of the entity in the text
     */
    start: number;
    /**
     * End offset of the entity in the text
     */
    end: number;
  };
  /**
   * Whether the entity type is nested
   */
  isTypeNested?: boolean;
  confidence: {
    /**
     * Confidence score for the named entity recognition
     */
    ner?: number;
    /**
     * Confidence score for the named entity linking
     */
    nel?: number;
  };
  wikidata?: {
    /**
     * Wikidata ID of the entity
     */
    id: string;
    /**
     * Wikipedia page name of the entity
     */
    wikipediaPageName?: string;
    /**
     * Wikipedia page URL of the entity
     */
    wikipediaPageUrl?: string;
  };
  /**
   * Function of the entity
   */
  function?: string;
  /**
   * Name of the entity
   */
  name?: string;
}


export type StatusOfTheCollection = string;

/**
 * Create new collection request
 */
export interface NewCollection {
  name: string;
  description?: string;
  status?: StatusOfTheCollection;
}


/**
 * Request to update collectible items in a collection
 */
export interface UpdateCollectableItems {
  /**
   * IDs of the items to add to the collection
   */
  add?: string[];
  /**
   * IDs of the items to remove from the collection
   */
  remove?: string[];
  [k: string]: unknown;
}


/**
 * Version of the API. Contains information about the current version of the API, features, etc.
 */
export interface APIVersion {
  solr: {
    endpoints?: {
      [k: string]: string;
    };
    [k: string]: unknown;
  };
  mysql: {
    endpoint?: string;
    [k: string]: unknown;
  };
  version: string;
  apiVersion: {
    branch?: string;
    revision?: string;
    version?: string;
    [k: string]: unknown;
  };
  documentsDateSpan: {
    start?: string;
    end?: string;
    [k: string]: unknown;
  };
  newspapers: {
    [k: string]: {
      name?: string;
      [k: string]: unknown;
    };
  };
  features: {
    [k: string]: {
      [k: string]: unknown;
    };
  };
}
