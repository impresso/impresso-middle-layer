
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */


export interface BaseFindResponse {
  data: unknown[];
  pagination: {
    /**
     * The total number of items matching the query
     */
    total: number;
    /**
     * The number of items returned in this response
     */
    limit: number;
    /**
     * Starting index of the items subset returned in this response
     */
    offset: number;
  };
}


/**
 * Collection details.
 */
export interface Collection {
  /**
   * Unique identifier of the collection.
   */
  uid: string;
  /**
   * Title of the collection.
   */
  title?: string;
  /**
   * Description of the collection.
   */
  description?: string;
  /**
   * Access level of the collection.
   */
  accessLevel?: "public" | "private";
  /**
   * Creation date of the collection.
   */
  createdAt?: string;
  /**
   * Last update date of the collection.
   */
  updatedAt?: string;
  /**
   * Total number of items in the collection.
   */
  totalItems?: number;
}


/**
 * A journal/magazine content item (article, advertisement, etc.)
 */
export interface ContentItem {
  /**
   * The unique identifier of the content item.
   */
  uid: string;
  /**
   * The type of the content item, as present in the OLR provided by the data provider. All content items are not characterised by the same set of types.
   */
  type?: string;
  /**
   * The title of the content item.
   */
  title?: string;
  /**
   * Transcript of the content item.
   */
  transcript?: string;
  /**
   * Locations mentioned in the content item.
   */
  locations?: EntityMention[];
  /**
   * Persions mentioned in the content item.
   */
  persons?: EntityMention[];
  /**
   * Topics mentioned in the content item.
   */
  topics?: TopicMention[];
  /**
   * The length of the transcript in characters.
   */
  transcriptLength?: number;
  /**
   * Total number of pages the item covers.
   */
  totalPages?: number;
  /**
   * ISO 639-1 language code of the content item.
   */
  languageCode?: string;
  /**
   * Whether the content item is on the front page of the publication.
   */
  isOnFrontPage?: boolean;
  /**
   * The publication date of the content item.
   */
  publicationDate?: string;
  /**
   * ISO 3166-1 alpha-2 country code of the content item.
   */
  countryCode?: string;
  /**
   * The code of the data provider.
   */
  dataProviderCode?: string;
  /**
   * Code of the newspaper or the other media the content item belongs to.
   */
  mediaCode?: string;
  /**
   * The type of the media the content item belongs to.
   */
  mediaType?: "newspaper";
}
/**
 * An entity (location, persion) mention.
 */
export interface EntityMention {
  /**
   * Unique identifier of the entity
   */
  uid: string;
  /**
   * Relevance of the entity in the document
   */
  relevance?: number;
}
/**
 * Topic presence in a content item.
 */
export interface TopicMention {
  /**
   * Unique identifier of the topic.
   */
  uid: string;
  /**
   * Relevance of the topic in the content item.
   */
  relevance?: number;
}


/**
 * An entity: location or person.
 */
export interface EntityDetails {
  /**
   * Unique identifier of the entity
   */
  uid: string;
  /**
   * Entity label
   */
  label?: string;
  type?: "person" | "location";
  /**
   * Wikidata identifier of the entity.
   */
  wikidataId?: string;
  /**
   * Total number of mentions of the entity.
   */
  totalMentions?: number;
  /**
   * Total number of content items the entity is mentioned in.
   */
  totalContentItems?: number;
  wikidataDetails?: WikidataPerson | WikidataLocation2;
}
/**
 * Wikidata person schema. Based on https://schema.org/Person
 */
export interface WikidataPerson {
  /**
   * The Q Wikidata ID of the person (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "human";
  /**
   * Labels of the person in different languages
   */
  labels?: {
    /**
     * Description of the person in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the person in different languages
   */
  descriptions?: {
    /**
     * Description of the person in a specific language
     */
    [k: string]: string;
  };
  /**
   * The birth date of the person
   */
  birthDate?: string;
  /**
   * The death date of the person
   */
  deathDate?: string;
  birthPlace?: WikidataLocation;
  deathPlace?: WikidataLocation1;
}
/**
 * The birth place of the person
 */
export interface WikidataLocation {
  /**
   * The Q Wikidata ID of the location (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "location";
  /**
   * Labels of the location in different languages
   */
  labels?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the location in different languages
   */
  descriptions?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  coordinates?: {
    /**
     * The latitude of the location
     */
    latitude?: number;
    /**
     * The longitude of the location
     */
    longitude?: number;
  };
}
/**
 * The death place of the person
 */
export interface WikidataLocation1 {
  /**
   * The Q Wikidata ID of the location (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "location";
  /**
   * Labels of the location in different languages
   */
  labels?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the location in different languages
   */
  descriptions?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  coordinates?: {
    /**
     * The latitude of the location
     */
    latitude?: number;
    /**
     * The longitude of the location
     */
    longitude?: number;
  };
}
/**
 * Wikidata location schema. Based on https://schema.org/Place
 */
export interface WikidataLocation2 {
  /**
   * The Q Wikidata ID of the location (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "location";
  /**
   * Labels of the location in different languages
   */
  labels?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the location in different languages
   */
  descriptions?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  coordinates?: {
    /**
     * The latitude of the location
     */
    latitude?: number;
    /**
     * The longitude of the location
     */
    longitude?: number;
  };
}


/**
 * An entity (location, persion) mention.
 */
export interface EntityMention {
  /**
   * Unique identifier of the entity
   */
  uid: string;
  /**
   * Relevance of the entity in the document
   */
  relevance?: number;
}


/**
 * A media source is what a content item belongs to. This can be a newspaper, a TV or a radio station, etc.
 */
export interface MediaSource {
  /**
   * The unique identifier of the media source.
   */
  uid: string;
  /**
   * The type of the media source.
   */
  type: "newspaper";
  /**
   * A display name of the media source.
   */
  name: string;
  /**
   * ISO 639-2 language codes this media source has content in.
   */
  languageCodes: string[];
  /**
   * The range of dates this media source has content items for. This represents the earliest and the latest dates of the contet items.
   *
   * @minItems 2
   * @maxItems 2
   */
  datesRange: [string, string];
  totals: {
    /**
     * The number of articles in the media source.
     */
    articles?: number;
    /**
     * The number of issues in the media source.
     */
    issues?: number;
    /**
     * The number of pages in the media source.
     */
    pages?: number;
  };
  properties: {
    /**
     * The unique identifier of the property.
     */
    id?: string;
    /**
     * The name of the property.
     */
    label?: string;
    /**
     * The value of the property.
     */
    value: string;
  }[];
}


/**
 * A newspaper
 */
export interface Newspaper {
  /**
   * The unique identifier of the newspaper.
   */
  uid: string;
  /**
   * The title of the newspaper.
   */
  title?: string;
  /**
   * The year of the first available article in the newspaper.
   */
  startYear?: number;
  /**
   * The year of the last available article in the newspaper.
   */
  endYear?: number;
  /**
   * ISO 639-1 codes of languages used in the newspaper.
   */
  languageCodes?: string[];
  /**
   * Total number of articles in the newspaper.
   */
  totalArticles?: number;
  /**
   * Total number of issues in the newspaper.
   */
  totalIssues?: number;
  /**
   * Total number of pages in the newspaper.
   */
  totalPages?: number;
}


/**
 * Facet bucket
 */
export interface SearchFacetBucket {
  /**
   * Number of items in the bucket
   */
  count: number;
  /**
   * Value that represents the bucket.
   */
  value: string | number;
  /**
   * Label of the value, if relevant.
   */
  label?: string;
}


/**
 * Text reuse cluster details.
 */
export interface TextReuseCluster {
  /**
   * Unique ID of the text reuse cluster.
   */
  uid: string;
  /**
   * Overlap in percents between the passages in the cluster.
   */
  lexicalOverlap?: number;
  /**
   * Number of passages in the cluster.
   */
  clusterSize?: number;
  /**
   * Sample of a text from one of the passages in the cluster.
   */
  textSample?: string;
  /**
   * Time coverage of the cluster.
   */
  timeCoverage?: {
    /**
     * Publication date of the earliest content item in the cluster.
     */
    startDate: string;
    /**
     * Publication date of the latest content item in the cluster.
     */
    endDate: string;
  };
}


/**
 * Represents a passage of text that was identified as a part of a text reuse cluster
 */
export interface TextReusePassage {
  /**
   * Unique ID of the text reuse passage.
   */
  uid: string;
  /**
   * Textual content of the passage.
   */
  content?: string;
  /**
   * ID of the content item that the text reuse passage belongs to.
   */
  contentItemId?: string;
  /**
   * Start and end offsets of the passage in the content item.
   */
  offset?: {
    /**
     * Start offset of the passage in the content item.
     */
    start: number;
    /**
     * End offset of the passage in the content item.
     */
    end: number;
    [k: string]: unknown;
  };
}


/**
 * Topic presence in a content item.
 */
export interface TopicMention {
  /**
   * Unique identifier of the topic.
   */
  uid: string;
  /**
   * Relevance of the topic in the content item.
   */
  relevance?: number;
}


/**
 * Details of the current version of the API and details of its aspects.
 */
export interface VersionDetails {
  /**
   * Version of the API.
   */
  version: string;
}


/**
 * Wikidata person schema. Based on https://schema.org/Person
 */
export interface WikidataPerson {
  /**
   * The Q Wikidata ID of the person (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "human";
  /**
   * Labels of the person in different languages
   */
  labels?: {
    /**
     * Description of the person in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the person in different languages
   */
  descriptions?: {
    /**
     * Description of the person in a specific language
     */
    [k: string]: string;
  };
  /**
   * The birth date of the person
   */
  birthDate?: string;
  /**
   * The death date of the person
   */
  deathDate?: string;
  birthPlace?: WikidataLocation;
  deathPlace?: WikidataLocation1;
}
/**
 * The birth place of the person
 */
export interface WikidataLocation {
  /**
   * The Q Wikidata ID of the location (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "location";
  /**
   * Labels of the location in different languages
   */
  labels?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the location in different languages
   */
  descriptions?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  coordinates?: {
    /**
     * The latitude of the location
     */
    latitude?: number;
    /**
     * The longitude of the location
     */
    longitude?: number;
  };
}
/**
 * The death place of the person
 */
export interface WikidataLocation1 {
  /**
   * The Q Wikidata ID of the location (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "location";
  /**
   * Labels of the location in different languages
   */
  labels?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the location in different languages
   */
  descriptions?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  coordinates?: {
    /**
     * The latitude of the location
     */
    latitude?: number;
    /**
     * The longitude of the location
     */
    longitude?: number;
  };
}


/**
 * Wikidata location schema. Based on https://schema.org/Place
 */
export interface WikidataLocation {
  /**
   * The Q Wikidata ID of the location (https://www.wikidata.org/wiki/Wikidata:Identifiers)
   */
  id: string;
  /**
   * The type of the entity
   */
  type: "location";
  /**
   * Labels of the location in different languages
   */
  labels?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  /**
   * Descriptions of the location in different languages
   */
  descriptions?: {
    /**
     * Description of the location in a specific language
     */
    [k: string]: string;
  };
  coordinates?: {
    /**
     * The latitude of the location
     */
    latitude?: number;
    /**
     * The longitude of the location
     */
    longitude?: number;
  };
}
